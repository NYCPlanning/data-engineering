name: ðŸ§ª Tests
run-name: ðŸ§ª Tests (${{ github.event_name }})

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  check_formatting:
    name: Check formatting of files
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:latest
    steps:
      - uses: actions/checkout@v3

      - name: Check python files
        run: black --diff --color --check .

      - name: Check sql files in products
        run: |
          # TODO: Gradually expand this to cover more products
          sqlfluff lint products/template/
          sqlfluff lint products/cpdb/sql/
          sqlfluff lint products/knownprojects/
          sqlfluff lint products/pluto/pluto_build/sql/
          sqlfluff lint products/zoningtaxlots/sql/

  mypy:
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:latest
    steps:
      - uses: actions/checkout@v3

      - name: Check python files
        run: |
          mypy dcpy
          mypy apps/qa/src
          mypy data-library/library
          mypy products/facilities
          mypy products/template

  check_changes:
    name: Check changed files
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: read
    outputs:
      path_filters: ${{ steps.filter.outputs.changes }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix_raw: ${{ steps.set-matrix.outputs.matrix_raw }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        if: github.event_name == 'pull_request'
        id: filter
        with:
          filters: |
            dcpy:
              - dcpy/**
              - pyproject.toml
              - python/**
            template:
              - .github/workflows/test.yml
              - .github/workflows/build.yml
              - .github/workflows/template_test.yml
              - products/template/**
              - dcpy/**
              - docker/**
              - python/**
            data-library:
              - data-library/**
              - python/**
            qa:
              - apps/qa/**
              - dcpy/**
              - docker/**
              - python/**
            cbbr:
              - products/cbbr/**
              - python/**
            checkbook:
              - products/checkbook/**
              - python/**
            zap:
              - products/zap-opendata/**
              - python/**
      - name: Confirm changes and set matrix
        id: set-matrix
        run: |
          echo "path filters with changed files: ${{ steps.filter.outputs.changes }}"
          if [[ -z "${{ steps.filter.outputs.changes }}" ]]; then
            matrix=$(cat .github/workflows/data/pytest.json | jq -cr)
          elif [[ "[]" = "${{ steps.filter.outputs.changes }}" ]]; then
            matrix="[]"
          else
            filter=$(echo '${{ steps.filter.outputs.changes }}' | sed 's/[][]//g' | sed -r 's/([\w-]+)(,|$)/"\1"\2/g')
            matrix=$(cat .github/workflows/data/pytest.json | jq -cr "map(. | select(.name|IN(${filter})))")
          fi
          echo "matrix_raw=$matrix" >> $GITHUB_OUTPUT
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
  
  template-db:
    needs: check_changes
    if: github.event_name != 'pull_request' || contains(needs.check_changes.outputs.path_filters, 'template')
    uses: ./.github/workflows/template_test.yml
    secrets: inherit

  pytest:
    name: Pytest - ${{ matrix.name }}
    needs: check_changes
    runs-on: ubuntu-22.04
    if: needs.check_changes.outputs.matrix_raw != '[]' 
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.check_changes.outputs.matrix) }}
    container: nycplanning/dev:latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.working-directory || '.' }}
    env:
      GHP_TOKEN: ${{ github.GITHUB_TOKEN }}
      RECIPE_ENGINE: ${{ secrets.RECIPE_ENGINE }}
      AWS_S3_BUCKET: edm-recipes
      BUILD_ENGINE: ${{ secrets.EDM_DATA_QAQC_ENGINE }}
      BUILD_ENGINE_SERVER: ${{ secrets.SQL_ENGINE_EDM_DATA_SERVER }}
      BUILD_ENGINE_DB: edm-qaqc
      ZAP_DOMAIN: ${{ secrets.ZAP_CRM_DOMAIN }}
      TENANT_ID: ${{ secrets.ZAP_CRM_TENANT_ID }}
      CLIENT_ID: ${{ secrets.ZAP_CRM_CLIENT_ID }}
      SECRET: ${{ secrets.ZAP_CRM_SECRET }}
      ZAP_ENGINE: ${{ secrets.SQL_ENGINE_EDM_DATA_SERVER }}/edm-zap
      TEST_SCHEMA_SUFFIX: pr_${{ github.event.pull_request.number || 'workflow_dispatch' }}
    steps:    
    - uses: actions/checkout@v3
    - name: Load Secrets
      uses: 1password/load-secrets-action@v1
      with:
        export-env: true
      env:
        OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        AWS_S3_ENDPOINT: "op://Data Engineering/DO_keys/AWS_S3_ENDPOINT"
        AWS_SECRET_ACCESS_KEY: "op://Data Engineering/DO_keys/AWS_SECRET_ACCESS_KEY"
        AWS_ACCESS_KEY_ID: "op://Data Engineering/DO_keys/AWS_ACCESS_KEY_ID"
    - name: Run Container Setup
      working-directory: ./
      run: ./bash/docker_container_setup.sh

    - name: Pytest
      env:
        calls: ${{ toJSON(matrix.calls) }}
      run: |
        echo "$calls" | jq -cr ".[]" | while read call; do
          IFS=$'\n' arr=( $(xargs -n1 <<<"$call") )
          python3 -m pytest ${arr[@]}
        done
  
  checkbook:
    needs: check_changes
    if: github.event_name != 'pull_request' || contains(needs.check_changes.outputs.path_filters, 'checkbook')
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:latest
    env:
      BUILD_ENGINE: postgresql://postgres:postgres@postgis:5432/postgres
    services:
      postgis:
        image: postgis/postgis:15-3.3-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    defaults:
      run:
        shell: bash
        working-directory: products/checkbook
    steps:
      - uses: actions/checkout@v3

      - name: Load Secrets
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          AWS_S3_ENDPOINT: "op://Data Engineering/DO_keys/AWS_S3_ENDPOINT"
          AWS_SECRET_ACCESS_KEY: "op://Data Engineering/DO_keys/AWS_SECRET_ACCESS_KEY"
          AWS_ACCESS_KEY_ID: "op://Data Engineering/DO_keys/AWS_ACCESS_KEY_ID"

      - name: Run python tests
        run: python3 -m pytest test/test_build_output.py
