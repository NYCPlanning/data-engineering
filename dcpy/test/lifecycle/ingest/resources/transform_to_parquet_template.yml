# csv non-spatial case
- file_name: test.csv
  file_format:
    type: csv

# csv spatial case (1 geom column, i.e. point or polygon geom)
- file_name: test.csv
  file_format:
    type: csv
    geometry:
      geom_column: wkt
      crs: EPSG:4326

# csv zipped case
- file_name: test.csv.zip
  file_format:
    type: csv
    unzipped_filename: test.csv
    geometry:
      geom_column: wkt
      crs: EPSG:4326

# csv spatial case (2 geom columns, i.e. longitude and latitude columns)
- file_name: test2.csv
  file_format:
    type: csv
    geometry:
      crs: EPSG:4326
      geom_column:
        x: longitude
        y: latitude

# excel non-spatial case
- file_name: test.xlsx
  file_format:
    type: xlsx
    tab_name: Sheet1

# excel spatial case (2 geom columns, i.e. longitude and latitude columns)
- file_name: test.xlsx
  file_format:
    type: xlsx
    tab_name: Sheet1
    geometry:
      crs: EPSG:4326
      geom_column:
        x: longitude
        y: latitude

- file_name: test/test.shp
  file_format:
    type: shapefile
    crs: EPSG:4326

# shapefile zipped case
- file_name: test.zip
  file_format:
    type: shapefile
    crs: EPSG:4326
    unzipped_filename: "test/test.shp"

- file_name: test.gdb
  file_format:
    type: geodatabase
    crs: EPSG:4326

# geodatabase zipped case
- file_name: test.gdb.zip
  file_format:
    type: geodatabase
    crs: EPSG:4326
    unzipped_filename: "test.gdb"

- file_name: test.geojson
  file_format:
    type: geojson

- file_name: test.json
  file_format:
    type: json
    json_read_meta:
      json_read_fn: read_json

# json: case where each object is a column
- file_name: test2.json
  file_format:
    type: json
    json_read_meta:
      json_read_fn: read_json
      json_read_kwargs: { "orient": "columns" }

# json: case with nested values
- file_name: test3.json
  file_format:
    type: json
    json_read_meta:
      json_read_fn: normalize
      json_read_kwargs: { "max_level": 1 }
