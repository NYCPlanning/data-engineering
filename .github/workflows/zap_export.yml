name: ZAP - Weekly Export from CRM

on:
  schedule:
    - cron: 0 0 * * 1
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
        working-directory: products/zap-opendata
    env:
      ZAP_DOMAIN: ${{ secrets.ZAP_CRM_DOMAIN }}
      TENANT_ID: ${{ secrets.ZAP_CRM_TENANT_ID }}
      CLIENT_ID: ${{ secrets.ZAP_CRM_CLIENT_ID }}
      SECRET: ${{ secrets.ZAP_CRM_SECRET }}
      ZAP_ENGINE: ${{ secrets.SQL_ENGINE_EDM_DATA_SERVER }}/edm-zap
      EDM_DATA_ZAP_SCHEMA: weekly_export_${{ github.event_name }}_${{ github.ref_name }}
      AWS_S3_ENDPOINT: ${{ secrets.DO_S3_ENDPOINT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.DO_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SECRET_ACCESS_KEY }}
      AWS_S3_LIBRARY_BUCKET: edm-recipes
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        entity:
          - dcp_projectactions
          - dcp_projectmilestones
          - dcp_projectactionbbls
          - dcp_communityboarddispositions
          - dcp_dcpprojectteams
        open:
          - false
        include:
          - entity: "dcp_projects"
            open: true
          - entity: "dcp_projectbbls"
            open: true

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: ./bash/setup_build_env.sh

      - name: Set Version info
        id: version
        run: |
          DATE=$(date +%Y%m%d)
          echo "version=$DATE" >> "$GITHUB_OUTPUT"

      # NOTE disabling all use of BigQuery
      # - name: Set up Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v0
      #   with:
      #     project_id: ${{ secrets.GCP_PROJECT_ID_DATA_ENGINEERING }}
      #     service_account_key: ${{ secrets.GCP_GCS_BQ_SA_KEY }}
      #     export_default_credentials: true

      - name: Set up Mini IO
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv ./mc /usr/bin
          mc config host add spaces $AWS_S3_ENDPOINT $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY --api S3v4

      - name: Get ${{ matrix.entity }}
        run: python3 -m src.runner ${{ matrix.entity }} $EDM_DATA_ZAP_SCHEMA

      # NOTE disabling all use of BigQuery
      # - name: Archive to BigQuery
      #   env:
      #     VERSION: ${{ steps.version.outputs.version }}
      #   run: ./zap.sh upload_bq ${{ matrix.entity }} $VERSION

      # NOTE disabling all use of BigQuery
      # - name: Archive recoded data to BigQuery
      #   env:
      #     VERSION: ${{ steps.version.outputs.version }}
      #   if: ${{ matrix.open }}
      #   run: |
      #     ./zap.sh upload_recoded_bq ${{ matrix.entity }} $VERSION

      - name: Archive to data library - PGdump
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "exporting ${{ matrix.entity }}.sql"
          docker run --rm \
            -e AWS_S3_ENDPOINT=$AWS_S3_ENDPOINT\
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\
            -e AWS_S3_BUCKET=$AWS_S3_LIBRARY_BUCKET\
            -v $(pwd)/templates:/templates\
            -v $(pwd)/.output:/.output\
            nycplanning/library:ubuntu-01d9e5eddf65dbdea3eb0c500314963b5ec6246a library archive -f /templates/${{ matrix.entity }}.yml -v $VERSION -s -l -o pgdump --compress

      - name: Archive to data library - CSV
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "exporting ${{ matrix.entity }}.csv"
          docker run --rm \
            -e AWS_S3_ENDPOINT=$AWS_S3_ENDPOINT\
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\
            -e AWS_S3_BUCKET=$AWS_S3_LIBRARY_BUCKET\
            -v $(pwd)/templates:/templates\
            -v $(pwd)/.output:/.output\
            nycplanning/library:ubuntu-01d9e5eddf65dbdea3eb0c500314963b5ec6246a library archive -f /templates/${{ matrix.entity }}.yml -v $VERSION -s -l -o csv --compress

      - name: Export to edm-private and edm-publishing
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          ./zap.sh upload_crm_do ${{ matrix.entity }} $VERSION

          if ${{ matrix.open }};
          then
          ./zap.sh upload_internal_do ${{ matrix.entity }} $VERSION
          ./zap.sh upload_visible_do ${{ matrix.entity }} $VERSION
          fi
