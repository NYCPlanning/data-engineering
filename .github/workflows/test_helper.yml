name: ðŸ§ª Tests - Helper

on:     
  workflow_call:
    inputs:
      path_filter: 
        type: string
        required: false
      image_tag:
        type: string
        required: false
        default: "latest"

jobs:
  ruff:
    name: Lint/check formatting of python files
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:${{ inputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Lint python files
        run: ruff check .
      - name: Check format of python files
        run: ruff format . --check

  sqlfluff:
    name: Check formatting of sql files
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:${{ inputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment (envars only)
        run: |
          ./bash/build_env_setup.sh

      - name: Check sql files in products
        run: |
          # TODO: Gradually expand this to cover more products
          sqlfluff lint products/template/sql
          sqlfluff lint products/cbbr/sql
          sqlfluff lint products/cpdb/sql/
          sqlfluff lint products/cpdb/sql_templates/ --templater=jinja
          sqlfluff lint products/developments/sql/*.sql
          sqlfluff lint products/developments/sql/qaqc
          sqlfluff lint products/developments/sql/unit_change_summary --templater=jinja
          sqlfluff lint products/facilities/facdb/sql/
          sqlfluff lint products/knownprojects/sql --templater=jinja
          sqlfluff lint products/pluto/pluto_build/sql/
          
  dbt:
    name: dbt tests
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:${{ inputs.image_tag }}
    defaults:
      run:
        shell: bash
        working-directory: products/${{ matrix.project }}
    env:
      BUILD_ENGINE_HOST: postgis
      BUILD_ENGINE_USER: postgres
      BUILD_ENGINE_PASSWORD: postgres
      BUILD_ENGINE_PORT: "5432"
      BUILD_ENGINE_DB: postgres
      BUILD_ENGINE_SCHEMA: ${{ matrix.project }}
      # sqlfluff env vars
      VERSION: "2024-05-01"
      VERSION_PREV: "2024-04-01"
    services:
      postgis:
        image: postgis/postgis:13-3.3-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --shm-size=2gb
        ports:
          - 5432:5432
    strategy:
      fail-fast: false
      matrix:
        project:
          - green_fast_track
          - zoningtaxlots
          - cdbg
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          git config --global --add safe.directory /__w/data-engineering/data-engineering
          dbt deps
          dbt build --select config.materialized:seed --indirect-selection=cautious --full-refresh
      - name: sqlfluff
        run: sqlfluff lint models --templater=dbt
      - name: dbt-checkpoint
        working-directory: "."
        run: |
          echo -e "version: 1\ndbt-project-dir: products/${{ matrix.project }}\n" >> .dbt-checkpoint.yaml
          pre-commit run --all-files

  mypy:
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:${{ inputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Check python files
        run: |
          mypy dcpy
          mypy apps/qa/src
          mypy products/facilities
          mypy products/template
          mypy admin/ops

  template-db:
    if: (inputs.path_filter == '') || contains(inputs.path_filter, 'template')
    uses: ./.github/workflows/template_test.yml
    with:
      image_tag: ${{ inputs.image_tag }}
    secrets: inherit

  set_pytest_matrix:
    name: Setup Pytests
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-pytest-matrix.outputs.matrix }}
      matrix_raw: ${{ steps.set-pytest-matrix.outputs.matrix_raw }}
    steps:
      - uses: actions/checkout@v4
              
      - name: Confirm changes and set matrix for pytest
        id: set-pytest-matrix
        run: |
          echo "path filters with changed files: ${{ inputs.path_filter }}"
          if [[ -z "${{ inputs.path_filter }}" ]]; then
            echo "Path filters weren't checked, running all tests"
            matrix=$(cat .github/workflows/data/pytest.yml | yq -ro json | jq -rc)
          elif [[ "[]" = "${{ inputs.path_filter }}" ]]; then
            echo "No relevant files changed, not running any tests"
            matrix="[]"
          else
            filter=$(echo '${{ inputs.path_filter }}' | sed 's/[][]//g' | sed -r 's/([\w-]+)(,|$)/"\1"\2/g')
            matrix=$(cat .github/workflows/data/pytest.yml | yq -ro json | jq -cr "map(. | select(.name|IN(${filter})))")
          fi
          echo "matrix_raw=$matrix" >> $GITHUB_OUTPUT
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT

  pytest:
    name: Pytest - ${{ matrix.name }}
    needs: set_pytest_matrix
    runs-on: ubuntu-22.04
    if: needs.set_pytest_matrix.outputs.matrix_raw != '[]' 
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set_pytest_matrix.outputs.matrix) }}
    container: nycplanning/dev:${{ inputs.image_tag }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.working-directory || '.' }}
    env:
      GHP_TOKEN: ${{ github.GITHUB_TOKEN }}
      RECIPES_BUCKET: edm-recipes
      BUILD_ENGINE_DB: ${{ matrix.db }}
      TEST_SCHEMA_SUFFIX: pr_${{ github.event.pull_request.number || 'workflow_dispatch' }}
    steps:    
    - uses: actions/checkout@v4
    - name: Load Secrets
      uses: 1password/load-secrets-action@v1
      with:
        export-env: true
      env:
        OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        CODECOV_TOKEN: "op://Data Engineering/Codecov/CODECOV_TOKEN"
        AWS_S3_ENDPOINT: "op://Data Engineering/DO_keys/AWS_S3_ENDPOINT"
        AWS_SECRET_ACCESS_KEY: "op://Data Engineering/DO_keys/AWS_SECRET_ACCESS_KEY"
        AWS_ACCESS_KEY_ID: "op://Data Engineering/DO_keys/AWS_ACCESS_KEY_ID"
        ZAP_DOMAIN: "op://Data Engineering/ZAP_CRM/DOMAIN"
        TENANT_ID: "op://Data Engineering/ZAP_CRM/TENANT_ID"
        CLIENT_ID: "op://Data Engineering/ZAP_CRM/CLIENT_ID"
        SECRET: "op://Data Engineering/ZAP_CRM/SECRET"
        BUILD_ENGINE_SERVER: "op://Data Engineering/EDM_DATA/server_url"
        RECIPE_ENGINE: "op://Data Engineering/EDM_DATA/defaultdb_url"
    - name: Run Container Setup
      working-directory: ./
      run: ./bash/docker_container_setup.sh

    - name: Pytest
      env:
        calls: ${{ toJSON(matrix.calls) }}
      run: |
        echo "$calls" | jq -cr ".[]" | while read call; do
          IFS=$'\n' arr=( $(xargs -n1 <<<"$call") )
          python3 -m pytest ${arr[@]}
        done

    - name: Upload dcpy test coverage to Codecov
      if: ${{ matrix.name =='dcpy' }}
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ env.CODECOV_TOKEN }}
      with:
        fail_ci_if_error: true
        verbose: true

  validate_product_metadata:
    if: contains(inputs.path_filter, 'dcpy')
    name: Validate Product Metadata
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:${{ inputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: NYCPlanning/product-metadata
          path: product-metadata
      - uses: actions/checkout@v4
        with:
          repository: NYCPlanning/data-engineering
          path: data-engineering
      - name: Validate All Metadata Files
        run: cd data-engineering; python -m dcpy.cli lifecycle scripts product_metadata validate_repo ../product-metadata
        env:
          RECIPES_BUCKET: edm-recipes
          PUBLISHING_BUCKET: edm-publishing
