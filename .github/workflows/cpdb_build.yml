name: CPDB - 🏗️ BUILD

on: 
  workflow_call:
    inputs:
      run_export:
        type: boolean
        required: true

jobs:
  build:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
        working-directory: products/cpdb
    container: 
      image: nycplanning/build-geosupport:latest
      env:
        BUILD_ENGINE_DATABASE: ${{ secrets.SQL_ENGINE_EDM_DATA_SERVER }}/db-cpdb
        BUILD_ENGINE_SCHEMA: build_${{ github.event.pull_request.number || github.ref_name }}
        EDM_DATA: ${{ secrets.EDM_DATA }}
    steps:
      - uses: actions/checkout@v3

      - name: Load Secrets
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          AWS_S3_ENDPOINT: "op://Data Engineering/DO_keys/AWS_S3_ENDPOINT"
          AWS_SECRET_ACCESS_KEY: "op://Data Engineering/DO_keys/AWS_SECRET_ACCESS_KEY"
          AWS_ACCESS_KEY_ID: "op://Data Engineering/DO_keys/AWS_ACCESS_KEY_ID"

      - name: Set build environment variables
        run: |
          # replace dashes with underscores to create a valid postgres schema name
          BUILD_ENGINE_SCHEMA=$(echo ${BUILD_ENGINE_SCHEMA} | tr - _)
          echo "BUILD_ENGINE_SCHEMA=$BUILD_ENGINE_SCHEMA" >> "$GITHUB_ENV"
          # set postgres schema search path to prioritize BUILD_ENGINE_SCHEMA
          BUILD_ENGINE=${BUILD_ENGINE_DATABASE}?options=--search_path%3D${BUILD_ENGINE_SCHEMA},public
          echo "BUILD_ENGINE=$BUILD_ENGINE" >> "$GITHUB_ENV"

      - name: Finish container setup
        working-directory: ./
        run: ./bash/docker_container_setup.sh

      - name: 01 dataloading
        run: |
          # TODO create a recipe for cpdb
          ./cpdb.sh dataloading

      - name: 02 Build Attribute
        run: ./cpdb.sh attribute

      - name: 03 Adminbounds
        run: ./cpdb.sh adminbounds

      - name: 04 Analysis
        run: ./cpdb.sh analysis

      - name: 05 Export
        if: inputs.run_export
        run: ./cpdb.sh export

      - name: 06 Upload to DigitalOcean
        if: inputs.run_export
        run: ./cpdb.sh upload
