name: ðŸ§ª Tests - Helper

on:     
  workflow_call:
    inputs:
      path_filter: 
        type: string
        required: false
      image_tag:
        type: string
        required: false
        default: "latest"

jobs:
  check_formatting:
    name: Check formatting of files
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:${{ inputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Check python files
        run: black --diff --color --check .

      - name: Check sql files in products
        run: |
          # TODO: Gradually expand this to cover more products
          sqlfluff lint products/template/
          sqlfluff lint products/cpdb/sql/
          sqlfluff lint products/knownprojects/
          sqlfluff lint products/pluto/pluto_build/sql/
          sqlfluff lint products/zoningtaxlots/sql/

  mypy:
    runs-on: ubuntu-22.04
    container:
      image: nycplanning/dev:${{ inputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Check python files
        run: |
          mypy dcpy
          mypy apps/qa/src
          mypy data-library/library
          mypy products/facilities
          mypy products/template
  
  template-db:
    if: (needs.check_changes.outputs.path_filters == '') || contains(needs.check_changes.outputs.path_filters, 'template')
    uses: ./.github/workflows/template_test.yml
    with:
      image_tag: ${{ inputs.image_tag }}
    secrets: inherit

  set_pytest_matrix:
    name: Setup Pytests
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-pytest-matrix.outputs.matrix }}
      matrix_raw: ${{ steps.set-pytest-matrix.outputs.matrix_raw }}
    steps:
      - uses: actions/checkout@v4
              
      - name: Confirm changes and set matrix for pytest
        id: set-pytest-matrix
        run: |
          echo "path filters with changed files: ${{ inputs.path_filter }}"
          if [[ -z "${{ inputs.path_filter }}" ]]; then
            matrix=$(cat .github/workflows/data/pytest.json | jq -cr)
          elif [[ "[]" = "${{ inputs.path_filter }}" ]]; then
            matrix="[]"
          else
            filter=$(echo '${{ inputs.path_filter }}' | sed 's/[][]//g' | sed -r 's/([\w-]+)(,|$)/"\1"\2/g')
            matrix=$(cat .github/workflows/data/pytest.json | jq -cr "map(. | select(.name|IN(${filter})))")
          fi
          echo "matrix_raw=$matrix" >> $GITHUB_OUTPUT
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT

  pytest:
    name: Pytest - ${{ matrix.name }}
    needs: set_pytest_matrix
    runs-on: ubuntu-22.04
    if: needs.set_pytest_matrix.outputs.matrix_raw != '[]' 
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set_pytest_matrix.outputs.matrix) }}
    container: nycplanning/dev:${{ inputs.image_tag }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.working-directory || '.' }}
    env:
      GHP_TOKEN: ${{ github.GITHUB_TOKEN }}
      RECIPE_ENGINE: ${{ secrets.RECIPE_ENGINE }}
      AWS_S3_BUCKET: edm-recipes
      BUILD_ENGINE_SERVER: ${{ secrets.SQL_ENGINE_EDM_DATA_SERVER }}
      BUILD_ENGINE_DB: ${{ matrix.db }}
      ZAP_DOMAIN: ${{ secrets.ZAP_CRM_DOMAIN }}
      TENANT_ID: ${{ secrets.ZAP_CRM_TENANT_ID }}
      CLIENT_ID: ${{ secrets.ZAP_CRM_CLIENT_ID }}
      SECRET: ${{ secrets.ZAP_CRM_SECRET }}
      ZAP_ENGINE: ${{ secrets.SQL_ENGINE_EDM_DATA_SERVER }}/edm-zap
      TEST_SCHEMA_SUFFIX: pr_${{ github.event.pull_request.number || 'workflow_dispatch' }}
    steps:    
    - uses: actions/checkout@v4
    - name: Load Secrets
      uses: 1password/load-secrets-action@v1
      with:
        export-env: true
      env:
        OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        AWS_S3_ENDPOINT: "op://Data Engineering/DO_keys/AWS_S3_ENDPOINT"
        AWS_SECRET_ACCESS_KEY: "op://Data Engineering/DO_keys/AWS_SECRET_ACCESS_KEY"
        AWS_ACCESS_KEY_ID: "op://Data Engineering/DO_keys/AWS_ACCESS_KEY_ID"
    - name: Run Container Setup
      working-directory: ./
      run: ./bash/docker_container_setup.sh

    - name: Pytest
      env:
        calls: ${{ toJSON(matrix.calls) }}
      run: |
        echo "$calls" | jq -cr ".[]" | while read call; do
          IFS=$'\n' arr=( $(xargs -n1 <<<"$call") )
          python3 -m pytest ${arr[@]}
        done
